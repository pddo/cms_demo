# This is an autogenerated file for dynamic methods in HABTM_Permissions
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class HABTM_Permissions::Relation < ActiveRecord::Relation
  include HABTM_Permissions::NamedScope
  extend T::Generic
  Elem = type_member(fixed: HABTM_Permissions)
end

class HABTM_Permissions < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend HABTM_Permissions::NamedScope
  Elem = type_template(fixed: HABTM_Permissions)

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def left_side(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def left_side=(value); end

  sig { returns(T.nilable(Permission)) }
  def permission(); end

  sig { params(value: T.nilable(Permission)).void }
  def permission=(value); end

  sig { returns(T.nilable(Integer)) }
  def permission_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def permission_id=(value); end

  sig { returns(T.nilable(Integer)) }
  def role_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def role_id=(value); end

end


module HABTM_Permissions::NamedScope
  extend T::Sig

  sig { returns(HABTM_Permissions::Relation) }
  def all(); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(HABTM_Permissions::Relation) }
  def except(*args, block); end

end

