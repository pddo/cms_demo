# This is an autogenerated file for dynamic methods in Admin
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Admin::Relation < ActiveRecord::Relation
  include Admin::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Admin)
end

class Admin < ActiveRecord::Base
  extend T::Sig
  extend T::Generic
  extend Admin::NamedScope
  Elem = type_template(fixed: Admin)

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(String) }
  def crypted_password(); end

  sig { params(value: String).void }
  def crypted_password=(value); end

  sig { returns(T.nilable(DateTime)) }
  def current_login_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def current_login_at=(value); end

  sig { returns(T.nilable(String)) }
  def current_login_ip(); end

  sig { params(value: T.nilable(String)).void }
  def current_login_ip=(value); end

  sig { returns(String) }
  def email(); end

  sig { params(value: String).void }
  def email=(value); end

  sig { returns(Integer) }
  def failed_login_count(); end

  sig { params(value: Integer).void }
  def failed_login_count=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def is_super(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def is_super=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def is_super?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def last_login_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def last_login_at=(value); end

  sig { returns(T.nilable(String)) }
  def last_login_ip(); end

  sig { params(value: T.nilable(String)).void }
  def last_login_ip=(value); end

  sig { returns(T.nilable(DateTime)) }
  def last_request_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def last_request_at=(value); end

  sig { returns(String) }
  def login(); end

  sig { params(value: String).void }
  def login=(value); end

  sig { returns(Integer) }
  def login_count(); end

  sig { params(value: Integer).void }
  def login_count=(value); end

  sig { returns(String) }
  def password_salt(); end

  sig { params(value: String).void }
  def password_salt=(value); end

  sig { returns(String) }
  def perishable_token(); end

  sig { params(value: String).void }
  def perishable_token=(value); end

  sig { returns(Permission::Relation) }
  def permissions(); end

  sig { params(value: T.any(T::Array[Permission], Permission::Relation)).void }
  def permissions=(value); end

  sig { returns(String) }
  def persistence_token(); end

  sig { params(value: String).void }
  def persistence_token=(value); end

  sig { returns(T.nilable(Role)) }
  def role(); end

  sig { params(value: T.nilable(Role)).void }
  def role=(value); end

  sig { returns(T.nilable(Integer)) }
  def role_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def role_id=(value); end

  sig { returns(String) }
  def single_access_token(); end

  sig { params(value: String).void }
  def single_access_token=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

end


module Admin::NamedScope
  extend T::Sig

  sig { returns(Admin::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Admin::Relation) }
  def logged_in(*args); end

  sig { params(args: T.untyped).returns(Admin::Relation) }
  def logged_out(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Admin::Relation) }
  def except(*args, block); end

end

